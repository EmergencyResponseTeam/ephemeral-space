using System.Globalization;
using Content.Client.Station;
using Content.Client.UserInterface.Controls;
using Content.Shared._ES.Evac.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._ES.Evac.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESEvacConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    private readonly ESEvacSystem _esEvac;
    private readonly StationSystem _station;

    public event Action? OnToggleButtonPressed;

    private TimeSpan _toggleTime;
    private TimeSpan? _endTime;
    private bool _locked;

    public ESEvacConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _esEvac = _entityManager.System<ESEvacSystem>();
        _station = _entityManager.System<StationSystem>();

        ToggleButton.OnPressed += _ => OnToggleButtonPressed?.Invoke();
    }

    public void UpdateStationStatuses(EntityUid owner)
    {
        StationStatusNameContainer.Children.Clear();
        StationStatusStateContainer.Children.Clear();

        var yesVotes = 0;
        var noVotes = 0;

        var query = _entityManager.EntityQueryEnumerator<ESEvacStationComponent, MetaDataComponent>();
        while (query.MoveNext(out _, out var beacon, out var meta))
        {
            if (beacon.EvacVoteEnabled)
                ++yesVotes;
            else
                ++noVotes;

            StationStatusNameContainer.AddChild(new RichTextLabel
            {
                Text = Loc.GetString("es-evac-computer-ui-station-list-name-fmt", ("name", meta.EntityName)),
            });
            StationStatusStateContainer.AddChild(new RichTextLabel
            {
                Text = Loc.GetString(beacon.EvacVoteEnabled
                    ? "es-evac-computer-ui-station-list-status-on"
                    : "es-evac-computer-ui-station-list-status-off"),
                HorizontalAlignment = HAlignment.Right
            });
        }

        var vote = (float) yesVotes / (yesVotes + noVotes);
        VoteStatusLabel.Text = Loc.GetString("es-evac-computer-ui-label-vote-needed",
            ("percent", vote * 100),
            ("needed", _esEvac.EvacVotePercentage * 100));

        if (_station.GetOwningStation(owner) is not { } station ||
            !_entityManager.TryGetComponent<ESEvacStationComponent>(station, out var comp))
            return;

        _toggleTime = comp.NextToggleTime;
        _endTime = comp.RoundEndTime;
        _locked = comp.Locked;
        ToggleButton.Text = Loc.GetString(comp.EvacVoteEnabled
            ? "es-evac-computer-ui-button-disable-signal"
            : "es-evac-computer-ui-button-enable-signal");
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        ToggleButton.Disabled = _locked || _timing.CurTime < _toggleTime;

        if (_endTime is { } endTime)
        {
            var time = MathHelper.Max(endTime - _timing.CurTime, TimeSpan.Zero).ToString(@"mm\:ss", CultureInfo.CurrentCulture);
            InfoLabel.Text = Loc.GetString("es-evac-computer-ui-label-info-eta", ("time", time));
            InfoLabel.Visible = true;
        }
        else if (_timing.CurTime < _toggleTime)
        {
            var time = MathHelper.Max(_toggleTime - _timing.CurTime, TimeSpan.Zero).ToString(@"mm\:ss", CultureInfo.CurrentCulture);
            InfoLabel.Text = Loc.GetString("es-evac-computer-ui-label-console-disabled", ("time", time));
            InfoLabel.Visible = true;
        }
        else
        {
            InfoLabel.Visible = false;
        }
    }
}

