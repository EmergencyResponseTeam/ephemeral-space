using Content.Client.Lobby;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._ES.Multistation.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESJobPrefToggleButton : Control
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;
    [Dependency] private readonly IClientPreferencesManager _preferences = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly ESMultistationSystem _multistation;
    private readonly SpriteSystem _sprite;

    public ProtoId<JobPrototype> JobId { get; private set; }

    public ESJobPrefToggleButton()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _multistation = _entityManager.System<ESMultistationSystem>();
        _sprite = _entityManager.System<SpriteSystem>();

        LockedPanel.Texture = _sprite.Frame0(new SpriteSpecifier.Texture(new("/Textures/Interface/Nano/lock.svg.192dpi.png")));
        ToggleButton.OnPressed += _ =>
        {
            if ((HumanoidCharacterProfile?) _preferences.Preferences?.SelectedCharacter is not { } profile)
                return;

            _preferences.UpdateCharacter(profile.WithJobPriority(JobId, ToggleButton.Pressed ? JobPriority.Medium : JobPriority.Never), 0);
        };

        _multistation.OnReadiedJobCountsChanged += () =>
        {
            ReadyCountLabel.Text = Loc.GetString("es-job-prefs-slot-available-count",
                ("queued", _multistation.ReadiedJobCounts.GetValueOrDefault(JobId, 0)),
                ("slots", _multistation.AvailableRoundstartJobs.GetValueOrDefault(JobId) ?? 0));
        };
    }

    public void SetJob(ProtoId<JobPrototype> jobId)
    {
        var job = _prototypeManager.Index(jobId);
        JobId = jobId;

        ToggleButton.Pressed = ((HumanoidCharacterProfile?) _preferences.Preferences?.SelectedCharacter)?.JobPriorities.GetValueOrDefault(JobId) != JobPriority.Never;

        LockedPanel.Visible = false;
        JobIcon.Texture = _sprite.Frame0(_prototypeManager.Index(job.Icon).Icon);
        JobNameLabel.Text = job.LocalizedName;

        ReadyCountLabel.Text = Loc.GetString("es-job-prefs-slot-available-count",
            ("queued", _multistation.ReadiedJobCounts.GetValueOrDefault(JobId, 0)),
            ("slots", _multistation.AvailableRoundstartJobs.GetValueOrDefault(JobId) ?? 0));

        if (!_jobRequirements.IsAllowed(job, (HumanoidCharacterProfile?)_preferences.Preferences?.SelectedCharacter, out var reason))
        {
            ToggleButton.Disabled = true;

            if (!reason.IsEmpty)
                ToggleButton.ToolTip = reason.ToMarkup();
            LockedPanel.Visible = true; // TODO: does this actually look good? This might look like ass...
        }
    }
}

