using System.Linq;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._ES.Multistation.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESJobPrefsWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;

    private readonly ESMultistationSystem _multistation;

    public ESJobPrefsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _multistation = _entityManager.System<ESMultistationSystem>();

        Rebuild();

        _jobRequirements.Updated += RebuildJobLists;
        _multistation.OnAvailableRoundstartJobsChanged += RebuildJobLists;
    }

    private void Rebuild()
    {
        RebuildJobLists();
    }

    private void RebuildJobLists()
    {
        JobContainer.Children.Clear();
        JobContainer2.Children.Clear();

        var departments = new List<DepartmentPrototype>();
        foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
        {
            if (department.EditorHidden)
                continue;

            departments.Add(department);
        }

        departments.Sort(DepartmentUIComparer.Instance);

        foreach(var department in departments)
        {
            var category = new ESDepartmentHeader();
            category.SetDepartment(department);

            var jobs = department.Roles.Select(jobId => _prototypeManager.Index(jobId))
                .Where(job => job.SetPreference)
                .ToArray();

            Array.Sort(jobs, JobUIComparer.Instance);

            foreach (var job in jobs)
            {
                if (!_multistation.AvailableRoundstartJobs.Keys.Contains(job))
                    continue;

                // Q: WHAT THE FUCK IS THIS LINQ
                // A: If a job is in multiple departments, only show it for the highest-ranking department it appears in
                if (_prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
                        .Where(p => p.Roles.Contains(job))
                        .MaxBy(p => p.Weight) != department)
                    continue;

                var button = new ESJobPrefToggleButton();
                button.SetJob(job);
                button.ToggleButton.OnMouseEntered += _ =>
                {
                    JobDisplay.SetJob(job.ID);
                };

                category.AddChild(button);
            }

            if (category.ChildCount == 1)
                continue;

            if (JobContainer.ChildCount == JobContainer2.ChildCount)
                JobContainer.AddChild(category);
            else
                JobContainer2.AddChild(category);
        }
    }
}
