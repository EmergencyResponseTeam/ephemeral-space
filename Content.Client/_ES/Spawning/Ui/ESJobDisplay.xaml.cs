using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Content.Shared.Station;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._ES.Spawning.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESJobDisplay : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SharedStationSpawningSystem _stationSpawning;

    private EntityUid _doll;

    public ESJobDisplay()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _stationSpawning = _entityManager.System<SharedStationSpawningSystem>();

        SetJob(SharedGameTicker.FallbackOverflowJob);
    }

    public void SetJob(ProtoId<JobPrototype> job)
    {
        var jobProto = _prototypeManager.Index(job);

        NameLabel.Text = Loc.GetString(jobProto.Name);
        DescriptionLabel.Text = jobProto.Description == null
            ? string.Empty
            : Loc.GetString(jobProto.Description);

        _entityManager.DeleteEntity(_doll);
        _doll = _entityManager.Spawn(_prototypeManager.Index(SharedHumanoidAppearanceSystem.DefaultSpecies).DollPrototype);
        JobView.SetEntity(_doll);

        // HACK SHIT i threw in because idk how this loadout bs works.
        var jobLoadout = LoadoutSystem.GetJobPrototype(job.Id);
        if (_prototypeManager.TryIndex(jobLoadout, out RoleLoadoutPrototype? roleProto))
        {
            var loadout = new RoleLoadout(jobLoadout);
            loadout.SetDefault(new HumanoidCharacterProfile(), null, _prototypeManager);
            _stationSpawning.EquipRoleLoadout(_doll, loadout, roleProto);
        }

        _stationSpawning.EquipStartingGear(_doll, jobProto.StartingGear);
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        _entityManager.DeleteEntity(_doll);
    }
}

