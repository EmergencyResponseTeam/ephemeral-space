using System.Linq;
using System.Numerics;
using Content.Client.GameTicking.Managers;
using Content.Client.Lobby;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Station;
using Content.Client.UserInterface.Controls;
using Content.Shared._ES.Spawning;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._ES.Spawning.Ui;

[GenerateTypedNameReferences]
public sealed partial class ESSpawningWindow : FancyWindow
{
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly JobRequirementsManager _jobRequirements = default!;

    private readonly ClientGameTicker _gameTicker;
    private readonly SpriteSystem _sprites;
    private readonly StationSystem _station;

    private readonly List<ESJobButton> _jobButtons = new();

    public ESSpawningWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprites = _entitySystem.GetEntitySystem<SpriteSystem>();
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        _station = _entitySystem.GetEntitySystem<StationSystem>();

        Rebuild();
        _jobRequirements.Updated += RebuildJobLists;
        _gameTicker.LobbyJobsAvailableUpdated += _ =>
        {
            foreach (var button in _jobButtons)
            {
                GetJobCount(button.Job, out var count, out var filteredCount);
                button.RefreshLabel(count, filteredCount);
            }
        };
    }

    private void Rebuild()
    {
        StationCheckboxContainer.Children.Clear();
        foreach (var station in _station.GetStations())
        {
            var ctrl = new ESStationCheckbox(station, _entityManager);
            ctrl.SetClickPressed(true); // All checkboxes are ticked by default
            ctrl.OnPressed += OnStationFiltered;

            StationCheckboxContainer.AddChild(ctrl);
        }

        RebuildJobLists();
    }

    private void OnStationFiltered(EntityUid obj)
    {
        RebuildJobLists();
    }

    private void RebuildJobLists()
    {
        _jobButtons.Clear();
        JobContainer.Children.Clear();
        JobContainer2.Children.Clear();

        var departments = new List<DepartmentPrototype>();
        foreach (var department in _prototypeManager.EnumeratePrototypes<DepartmentPrototype>())
        {
            if (department.EditorHidden)
                continue;

            departments.Add(department);
        }

        departments.Sort(DepartmentUIComparer.Instance);

        foreach(var department in departments)
        {
            var category = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
            };

            category.AddChild(new PanelContainer
            {
                PanelOverride = new StyleBoxFlat { BackgroundColor = department.Color },
                MinHeight = 30,
                HorizontalExpand = true,
                Children =
                {
                    new RichTextLabel
                    {
                        Text = Loc.GetString("es-spawn-menu-job-department-format",
                            ("department", Loc.GetString(department.Name))),
                        VerticalAlignment = VAlignment.Center,
                        HorizontalExpand = true,
                        Margin = new Thickness(5f, 0, 0, 0),
                    }
                }
            });

            // NOTE: this shows jobs twice if they appear in multiple departments. I guess that's fine?
            var jobs = department.Roles.Select(jobId => _prototypeManager.Index(jobId))
                .Where(job => job.SetPreference)
                .ToArray();

            Array.Sort(jobs, JobUIComparer.Instance);

            foreach (var job in jobs)
            {
                if (!JobIsSupported(job))
                    continue;

                // Q: WHAT THE FUCK IS THIS LINQ
                // A: If a job is in multiple departments, only show it for the lowest-ranking department it appears in
                if (_prototypeManager.EnumeratePrototypes<DepartmentPrototype>().Where(p => p.Roles.Contains(job)).MinBy(p => p.Weight) != department)
                    continue;

                GetJobCount(job, out var count, out var filteredCount);

                var button = new ESJobButton(job, count, filteredCount, _prototypeManager, _sprites)
                {
                    HorizontalExpand = true
                };
                button.OnPressed += _ =>
                {
                    var ev = new ESSpawnPlayerEvent(GetNetSelectedStations().ToList(), job);
                    _entityManager.EntityNetManager.SendSystemNetworkMessage(ev);
                    Close();
                };
                button.OnMouseEntered += _ =>
                {
                    JobDisplay.SetJob(job.ID);
                };

                // Gratuitous copypasta start here
                if (!_jobRequirements.IsAllowed(job, (HumanoidCharacterProfile?)_preferencesManager.Preferences?.SelectedCharacter, out var reason))
                {
                    button.Disabled = true;

                    if (!reason.IsEmpty)
                    {
                        var tooltip = new Tooltip();
                        tooltip.SetMessage(reason);
                        button.TooltipSupplier = _ => tooltip;
                    }

                    button.AddChild(new TextureRect
                    {
                        TextureScale = new Vector2(0.4f, 0.4f),
                        Stretch = TextureRect.StretchMode.KeepCentered,
                        Texture = _sprites.Frame0(new SpriteSpecifier.Texture(new ("/Textures/Interface/Nano/lock.svg.192dpi.png"))),
                        HorizontalExpand = true,
                        HorizontalAlignment = HAlignment.Right,
                    });
                }
                else if (count == 0)
                {
                    button.Disabled = true;
                }
                // Gratuitous copypasta end here

                _jobButtons.Add(button);
                category.AddChild(button);
            }

            if (category.ChildCount == 1)
                continue;

            if (JobContainer.ChildCount == JobContainer2.ChildCount)
                JobContainer.AddChild(category);
            else
                JobContainer2.AddChild(category);
        }
    }

    private void GetJobCount(ProtoId<JobPrototype> job, out int? count, out int? filteredCount)
    {
        var selected = GetSelectedStations().ToHashSet();

        count = 0;
        filteredCount = 0;

        foreach (var (station, jobDict) in _gameTicker.JobsAvailable)
        {
            if (selected.Contains(_entityManager.GetEntity(station)))
                count += jobDict.GetValueOrDefault(job, 0);
            else
                filteredCount += jobDict.GetValueOrDefault(job, 0);
        }
    }

    private bool JobIsSupported(JobPrototype job)
    {
        return _gameTicker.JobsAvailable.Any(p => p.Value.ContainsKey(job));
    }

    private IEnumerable<EntityUid> GetSelectedStations()
    {
        foreach (var child in StationCheckboxContainer.Children)
        {
            if (child is ESStationCheckbox checkBox && checkBox.Pressed)
                yield return checkBox.Station;
        }
    }

    private IEnumerable<NetEntity> GetNetSelectedStations()
    {
        return GetSelectedStations().Select(e => _entityManager.GetNetEntity(e));
    }
}

public sealed class ESJobButton : ContainerButton
{
    public Label JobAmountLabel { get; }
    public RichTextLabel JobFilteredAmountLabel { get; }

    public ProtoId<JobPrototype> Job;

    public ESJobButton(JobPrototype job, int? amount, int? filteredAmount, IPrototypeManager protoMan, SpriteSystem sys)
    {
        HorizontalExpand = true;
        VerticalExpand = true;

        Job = job;

        var box = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        var icon = new TextureRect
        {
            TextureScale = new Vector2(2, 2),
            VerticalAlignment = VAlignment.Center,
        };
        icon.Texture = sys.Frame0(protoMan.Index(job.Icon).Icon);

        var jobNameLabel = new Label
        {
            Text = job.LocalizedName,
            Margin = new Thickness(5f, 0, 0, 0),
            HorizontalExpand = true,
        };

        var ctrl = new Control
        {
            HorizontalExpand = true,
        };

        JobAmountLabel = new Label
        {
            HorizontalAlignment = HAlignment.Right,
        };

        JobFilteredAmountLabel = new RichTextLabel
        {
            HorizontalAlignment = HAlignment.Right,
            Margin = new Thickness(5, 0, 0, 0),
        };

        RefreshLabel(amount, filteredAmount);

        box.AddChild(icon);
        box.AddChild(jobNameLabel);
        box.AddChild(ctrl);
        box.AddChild(JobAmountLabel);
        box.AddChild(JobFilteredAmountLabel);
        AddChild(box);
        AddStyleClass("button");
    }

    public void RefreshLabel(int? amount, int? filteredAmount)
    {
        JobAmountLabel.Text = amount != null
            ? Loc.GetString("es-spawn-menu-job-slot-capped", ("amount", amount))
            : Loc.GetString("es-spawn-menu-job-slot-uncapped");

        // We don't care if the number of available slots increases by infinity. that is meaningless.
        JobFilteredAmountLabel.Visible = filteredAmount != 0 && amount != null;
        JobFilteredAmountLabel.Text = filteredAmount != null
            ? Loc.GetString("es-spawn-menu-job-slot-excluded", ("amount", filteredAmount))
            : Loc.GetString("es-spawn-menu-job-slot-excluded-uncapped");

        if (!Disabled && amount == 0)
            Disabled = true;

    }
}

